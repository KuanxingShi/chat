//============================================================================
// Name        : myoracle.pc
// Author      : 
// Version     :
// Copyright   : zhujingyao 2014-01-20
// Description : oracle in C++, Ansi-style
//============================================================================

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include "myoracle.h"




EXEC SQL BEGIN DECLARE SECTION; 
	sql_context m_pContext;
	long SQLCODE;
EXEC SQL END DECLARE SECTION;

extern "C" void sqlglmt(void*, char*, size_t*, size_t* ); 

void myoracle::sql_error()//定义一个错误安装函数
{
	char m_sErrorString[512];
	size_t tMessageSize = 0;
	size_t tErrorSize = sizeof(m_sErrorString);
	memset(m_sErrorString, 0, sizeof(m_sErrorString));
	sqlglmt(m_pContext, m_sErrorString, &tErrorSize, &tMessageSize);
	m_sErrorString[tMessageSize] = 0;
	printf("%s\n", m_sErrorString);
}

myoracle::myoracle()
{
	sql_init();//初始化oracle
}

myoracle::~myoracle()
{
	sql_free();//释放oracle相关资源
}

void myoracle::sql_init()
{
	SQLCODE = 0;
	m_pContext = NULL;
	EXEC SQL ENABLE THREADS;//标明可以在线程中使用
	EXEC SQL CONTEXT ALLOCATE :m_pContext;//为m_pContext分配资源
	EXEC SQL CONTEXT USE :m_pContext;//使用m_pContext
}

int myoracle::sql_connect(const char *Hostname, const char *User, const char *Password, const char *DBName)
{
	EXEC SQL BEGIN DECLARE SECTION;
		const char *sUser;
		const char *sPassword;
		const char *sServer;
	EXEC SQL END DECLARE SECTION;
	
	SQLCODE = 0;
	sUser = User;
	sPassword = Password;
	sServer = DBName;
	EXEC SQL CONNECT :sUser IDENTIFIED BY :sPassword USING :sServer;//连接到oracle
	if (SQLCODE != 0)
	{
		sql_error();//连接失败，打印错误原因
		return -1;
	}else
	{
		return 0;
	}
}

int myoracle::sql_open(const char *DySQL)//执行SELECT语句
{
	int result = 0;
	EXEC SQL BEGIN DECLARE SECTION;
		int i, iOutput_count, iOccurs, iType, iLen;
		//short iInd;
		char sData[1024];//result buffer;
		char sOutput[64];
		char sInput[64];
		const char *m_sDySQL;
	EXEC SQL END DECLARE SECTION;
	SQLCODE = 0;
	iLen = sizeof(sData);
	iType = 12;//设置类型为字符串
	m_sDySQL = DySQL;	
	sprintf(sOutput, "output%p", m_pContext);//生成一个在系统中不会重复的字符串
	sprintf(sInput, "input%p", m_pContext);//生成一个在系统中不会重复的字符串
	EXEC SQL ALLOCATE DESCRIPTOR :sOutput;//为输出空间分配资源
	EXEC SQL ALLOCATE DESCRIPTOR :sInput;//为输入空间分配资源
	EXEC SQL PREPARE S FROM :m_sDySQL;//准备执行指定的SELECT语句
	if (SQLCODE != 0)
	{
		sql_error();//如果错误，打印错误原因
		EXEC SQL DEALLOCATE DESCRIPTOR :sInput;//释放已经分配的输入空间资源
		EXEC SQL DEALLOCATE DESCRIPTOR :sOutput;//释放已经分配的输出空间资源
		return -1;		
	}		

	EXEC SQL DECLARE C CURSOR FOR S;//定义一个游标C
	EXEC SQL OPEN C USING DESCRIPTOR :sInput;//打开游标C
	/*选择输出区域*/
	EXEC SQL DESCRIBE OUTPUT S USING DESCRIPTOR :sOutput;
	/*取得选择列表的个数*/
	EXEC SQL GET DESCRIPTOR :sOutput :iOutput_count = COUNT;
	for(i=0;i<iOutput_count;i++)//循环遍历所有字段
	{
		iOccurs = i + 1;	
		EXEC SQL SET DESCRIPTOR :sOutput 
			VALUE :iOccurs TYPE = :iType, LENGTH = :iLen;			
	}
	EXEC SQL WHENEVER NOT FOUND DO BREAK;//如果查询不到记录，下面的while循环break
	while(true)
	{
		/*行数据，输出描述区*/ 
		EXEC SQL FETCH C INTO DESCRIPTOR :sOutput;	
		result = 1;//如果查询到记录函数返回1
	}
	EXEC SQL CLOSE C;//关闭游标C
	EXEC SQL DEALLOCATE DESCRIPTOR :sOutput;//释放已经分配的输出空间资源
	EXEC SQL DEALLOCATE DESCRIPTOR :sInput;//释放已经分配的输入空间资源
	return result;
}

void myoracle::sql_disconnect()
{
	SQLCODE = 0;
	EXEC SQL ROLLBACK WORK RELEASE;//断开oracle连接
	if (SQLCODE != 0)
	{
		sql_error();
	}
}

int myoracle::sql_free()
{
	SQLCODE = 0;
	EXEC SQL CONTEXT FREE :m_pContext;	//释放m_pContext相关资源
	if (SQLCODE != 0)
	{
		sql_error();
		return 1;
	}else
	{
		return 0;
	}
}
